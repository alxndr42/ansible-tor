---
- name: create instance {{ instance.name }}
  command: tor-instance-create {{ instance.name }}
  args:
    creates: /etc/tor/instances/{{ instance.name }}/torrc

- name: copy offline ED25519 keys
  copy:
    src: "{{ tor_offline_keys }}/{{ inventory_hostname }}/{{ instance.name }}/keys/{{ item }}"
    dest: /var/lib/tor-instances/{{ instance.name }}/keys/
    mode: 0600
    owner: _tor-{{ instance.name }}
    group: _tor-{{ instance.name }}
  loop:
    - ed25519_master_id_public_key
    - ed25519_signing_cert
    - ed25519_signing_secret_key
  notify: reload Tor
  tags: copy-offline-keys

- name: check for remote RSA key
  stat:
    path: /var/lib/tor-instances/{{ instance.name }}/keys/secret_id_key
  register: remote_rsa_key
  tags: copy-offline-keys

- name: check for local RSA key
  local_action:
    module: stat
    path: "{{ tor_offline_keys }}/{{ inventory_hostname }}/{{ instance.name }}/keys/secret_id_key"
  become: no
  register: local_rsa_key
  tags: copy-offline-keys

- name: copy remote RSA key
  fetch:
    src: /var/lib/tor-instances/{{ instance.name }}/keys/secret_id_key
    dest: "{{ tor_offline_keys }}/{{ inventory_hostname }}/{{ instance.name }}/keys/"
    flat: yes
  when: remote_rsa_key.stat.exists and not local_rsa_key.stat.exists
  tags: copy-offline-keys

- name: copy local RSA key
  copy:
    src: "{{ tor_offline_keys }}/{{ inventory_hostname }}/{{ instance.name }}/keys/secret_id_key"
    dest: /var/lib/tor-instances/{{ instance.name }}/keys/
    mode: 0600
    owner: _tor-{{ instance.name }}
    group: _tor-{{ instance.name }}
  when: local_rsa_key.stat.exists
  tags: copy-offline-keys

- name: template instance torrc
  template:
    src: torrc-{{ type }}.j2
    dest: /etc/tor/instances/{{ instance.name }}/torrc
    backup: yes
  notify: reload Tor

- name: enable service
  service:
    name: tor@{{ instance.name }}
    enabled: yes
    state: started
